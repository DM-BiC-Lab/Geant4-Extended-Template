# Runs the project in the directory where this file is located

# Optional arguments:
# -rb / --rebuild           = Rebuilds project entirely, then runs the project
# -a / --auto / --automatic = Runs "auto.mac" without opening GUI, then runs
#                             "analyze.sh", which checks for output files and
#                             runs "analyze.py" to allow for automatic data analysis
# -v / --vis / --visualize  = Sets -a argument automatically, then after data analysis
#                             checks for an "output.root" file in the "output-files/analysis-gen"
#                             directory. If this file exists, it will be opened in the ROOT broswer
# -m / --macro              = Runs "auto.mac" upon opening the program
# -M / --MACRO              = Runs the macro at a specified location
#                             (example: . run.sh -M mymacro.mac) if combined with -a or -v, the 
#                             specified macro will be used instead of "auto.mac"
# -i / --iterations         = Set -a automatically, then sets the number of runs that should be executed
#                             (example: ". run.sh -i 20" will run 20 simulations using "auto.mac")
 


# * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
# THIS VARIABLE MUST BE SET TO THE ABSOLUTE PATH OF YOUR GEANT4 INSTALL
#* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
INSTALL_PATH="/path/to/install"
 
# Sourcing these files is required to run Geant4
source "$INSTALL_PATH/share/Geant4/geant4make/geant4make.sh"
source "$INSTALL_PATH/bin/geant4.sh"

# Reset command line argument flags
REBUILD=""
AUTO=""
VIS=""
MACRO=""
SPECIAL_MACRO=""
ERROR=""

GET_MACRO=""
MACRO_NAME=""

GET_INTERATIONS=""
ITERATIONS="1"

# Get all command line arguments
for arg in "$@"
do
    if [ "$GET_MACRO" == "SET" ]
    then
    	MACRO_NAME=$arg
    	GET_MACRO=""
    	continue
    fi
    if [ "$GET_ITERATIONS" == "SET" ]
    then
        GET_ITERATIONS=""
        re='^[0-9]+$'
        if ! [[ $arg =~ $re ]]
        then
            ERROR="SET"
            echo "ERROR: Invalid numerical value \"$arg\" found"
        else
           ITERATIONS=$(($arg))
        fi
        continue
    fi
    case $arg in
        -rb|--rebuild) REBUILD="SET"            
        ;;
        -a|--auto|--automatic) AUTO="SET"            
        ;;
        -v|--vis|--visualize) VIS="SET"
        ;;
        -m|--macro) MACRO="SET"
        ;;
        -M|--MACRO) SPECIAL_MACRO="SET"
                    GET_MACRO="SET"
        ;;
        -i|--iterations) GET_ITERATIONS="SET"
        ;;
        *) ERROR="SET"
           echo "ERROR: Invalid argument \"$arg\" found"
        ;;
    esac
done

# If there were any invalid arguments do not continue
if [ "$ERROR" == "SET" ]
then
    return
fi

# -v forces -a
if [ "$VIS" == "SET" ]
then
    AUTO="SET"
fi

# -i forces -a
if [ "$ITERATIONS" != "1" ]
then
    AUTO="SET"
fi

# -a overrides -m
if [ "$AUTO" == "SET" ]
then
    MACRO=""
fi
# -M overrides -m
if [ "$SPECIAL_MACRO" == "SET" ]
then
    MACRO=""
fi

# If the build flag is set
if  [ "$REBUILD" == "SET" ]
then
    # If the build directory exists...
    if [ -d "./build" ]
    then
        # Remove build directory along with files inside
        rm -r ./build
    fi
fi

# If the build directory does not exist, create it
if ! [ -d "./build" ]
then
    mkdir build
fi

# Build / rebuild project
cd build
cmake ..
make
cd ..

# Get the name of the output executable from "CMakeLists.txt"
BUILD_EXE=$(grep "set(OUTPUT_EXE_NAME" CMakeLists.txt)
BUILD_EXE=${BUILD_EXE#*\"}
BUILD_EXE=${BUILD_EXE%\"*}

# Check if the output file directory exists
if [ -d "./output-files" ]
then
    # Remove it if it does
    rm -r output-files
fi
mkdir output-files
# Move into output file directory (this way all files
# generated by program are created here by default)
cd output-files

for (( i=0; i<$ITERATIONS; i++ ))
do
    # If the executable exists in the build directory...
    if [ -f "../build/$BUILD_EXE" ]
    then
        # If -M has been set...
        if [ "$SPECIAL_MACRO" == "SET" ]
        then
            # If no macro name has been specified...
            if [ "$MACRO_NAME" == "" ]
            then
            	# Print an appropriate error message and return
                echo -e "\nERROR: Unable to run macro. No macro specified.\n"
                cd ..
                return
            fi
            # Otherwise, if the specified macro does not exist...
            if ! [ -f "../$MACRO_NAME" ]
            then
            	# Print an appropriate error message and return
                echo -e "\nERROR: Unable to run macro. No macro \"$MACRO_NAME\" found.\n"
                cd ..
                return
            fi
            # If the auto flag is set...
            if [ "$AUTO" == "SET" ]
            then
                # Run the executable with automatic data processing and the macro
                ../build/$BUILD_EXE AUTOMATIC SPECIAL $MACRO_NAME $i
            else
                # Otherwise, run the executable with the macro
                ../build/$BUILD_EXE SPECIAL $MACRO_NAME
            fi
        # If -M is not set, but -a is...
        elif  [ "$AUTO" == "SET" ]
        then
            # Run the executable with automatic data processing
            ../build/$BUILD_EXE AUTOMATIC $i
        # Otherwise, if -m is set
        elif [ "$MACRO" == "SET" ]
        then
            # Run the executable with "auto.mac"
            ../build/$BUILD_EXE MACRO
        else
            # Otherswise, run the executable normally
            ../build/$BUILD_EXE
        fi
    else
        # Otherwise, print an appropriate error message
        echo -e "\nERROR: Could not execute build. Executable not found. Try building manually?\n"
        cd ..
        return
    fi
done

# Move back into main project directory
cd ..

# If the output file directory is empty...
if [ -z "$(ls -A ./output-files)" ]
then
    # If data was meant to be automatically analyzed...
    if [ "$AUTO" == "SET" ]
    then
        echo -e "\nERROR: No output files generated. Unable to automatically analyze data.\n"
    fi
    # Remove the directory
    rm -r output-files
    return
fi

# If the auto flag it set...
if [ "$AUTO" == "SET" ]
then
    #  Begin automatic data analysis
    . analyze.sh
fi
